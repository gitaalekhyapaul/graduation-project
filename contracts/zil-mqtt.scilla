(***************************************************)
(*                 Scilla version                  *)
(***************************************************)

scilla_version 0
import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)

library ZilMQTT


(* Library code block follows *)
let true = True
let false = False
let empty_list = Nil {String}
let empty_map = Emp String (List String)
type ContractErrors = 
    | NotPausedError
    | PausedError
    | NotOwnerError
    | TopicDoesNotExist
    | ClientIdDoesNotExist
    | DuplicateHostname

let throw_err =
    fun (err : ContractErrors) => 
        let error_code =
            match err with
                | NotPausedError => Int32 -1
                | PausedError => Int32 -2
                | NotOwnerError => Int32 -3
                | TopicDoesNotExist => Int32 -4
                | ClientIdDoesNotExist => Int32 -5
                | DuplicateHostname => Int32 -6
             end
        in
        { _exception: "Error"; code: error_code }

let create_1el_list =
    fun (e1 : String) => 
        (* expression goes here *)
        Cons{String} e1 empty_list
let create_2el_list =
    fun (e1 : String) => 
    fun (e2: String) =>
        (* expression goes here *)
        let nil = empty_list in
        let first = Cons{String} e1 nil in
        Cons{String} e2 first
    

(***************************************************)
(*             Contract definition                 *)
(***************************************************)

contract ZilMQTT

(* Immutable fields declaration *)

(initial_contract_owner: ByStr20)

(* Mutable fields declaration *)
field contract_owner : ByStr20 = initial_contract_owner
field retained_messages : Map String (List String) = Emp String (List String)
field dead_letter_queue : Map String (List String) = Emp String (List String)
field broker_dns: Map String (List String) = Emp String (List String)
field topic_assignment: Map String (List String) = Emp String (List String)
field paused: Bool = False

(* Procedures *)

procedure Throw(error: ContractErrors)
    e = throw_err error;
    throw e
end

procedure RequireOwner()
    curr_owner <- contract_owner;
    is_contract_owner = builtin eq curr_owner _sender;
    match is_contract_owner with
        | True =>
        | False =>
            error = NotOwnerError;
            Throw error
    end
end

procedure RequireNotPaused()
    is_paused <- paused;
    match is_paused with
        | False =>
        | True =>
            error = PausedError;
            Throw error
    end      
end

procedure RequirePaused()
  is_paused <- paused;
  match is_paused with
  | True =>
  | False =>
    error = NotPausedError;
    Throw error
  end
end

procedure ClientIdExists(clientid: String)
  is_paused <- paused;
  does_clientid_exist <- exists dead_letter_queue[clientid];
  match does_clientid_exist with
    | True =>
    | False =>
      error = ClientIdDoesNotExist;
      Throw error
  end
end

(* Transitions *)

(* Pauses the contract as a circuit-breaker mechanism. *)

transition Pause()
    RequireNotPaused;
    RequireOwner;
    paused := true;

    e = {
        _eventname: "Pause";
        paused: true
    };
    event e
end

(* Unpauses the contract. *)

transition Unpause()
    RequirePaused;
    RequireOwner;
    paused := false;

    e = {
        _eventname: "Unpause";
        paused: false
    };
    event e
end

transition AppendMessage(topic: String, message: String)
    RequireNotPaused;
    RequireOwner;
    does_topic_exist <- exists retained_messages[topic];
    match does_topic_exist with
        | True =>
        list_append_string = @list_append String;
        new_el = create_1el_list message;
        curr_messages_for_topic <- retained_messages[topic];
        match curr_messages_for_topic with
            | Some curr_messages =>
            (*statements for true*)
            new_list = list_append_string curr_messages new_el;
            retained_messages[topic] := new_list
            | None =>
         end  
        | False =>
        new_el = create_1el_list message;
        retained_messages[topic] := new_el
     end;
     e = {
        _eventname: "AppendMessage";
        topic: topic;
        message: message
     };
     event e
    
end

transition QueueDeadLetters(clientid: String, message: String)
    RequireNotPaused;
    RequireOwner;
    does_clientid_exist <- exists dead_letter_queue[clientid];
    match does_clientid_exist with
        | True =>
        list_append_string = @list_append String;
        new_el = create_1el_list message;
        curr_messages_for_clientid <- dead_letter_queue[clientid];
        match curr_messages_for_clientid with
            | Some curr_messages =>
            (*statements for true*)
            new_list = list_append_string curr_messages new_el;
            dead_letter_queue[clientid] := new_list
            | None =>
         end  
        | False =>
        new_el = create_1el_list message;
        dead_letter_queue[clientid] := new_el
     end;
     e = {
        _eventname: "QueueDeadLetter";
        clientid: clientid;
        message: message
     };
     event e
    
end

transition DequeueDeadLetters(clientid: String)
    RequireNotPaused;
    RequireOwner;    
    ClientIdExists clientid;
    dead_letter_queue[clientid] := empty_list;
    e = {
        _eventname: "DequeueDeadLetters";
        clientid: clientid
     };
     event e
end

transition RegisterDNS(hostname: String, ip: String, port: String)
    RequireNotPaused;
    RequireOwner;
    does_hostname_exist <- exists broker_dns[hostname];
    match does_hostname_exist with
        | True =>
        error = DuplicateHostname;
        Throw error
        | False =>
        new_el = create_2el_list port ip;
        broker_dns[hostname] := new_el
     end;
     e = {
        _eventname: "RegisterDNS";
        hostname: hostname;
        ip: ip;
        port: port
     };
     event e
    
end


transition UpdateTopicAssignments(topic: String, brokers: List String)
    RequireNotPaused;
    RequireOwner;
    topic_assignment[topic] := brokers;
    
     e = {
        _eventname: "UpdateTopicAssignments";
        topic: topic;
        brokers: brokers
     };
     event e
    
end

transition ClearDNSCache()
    RequireNotPaused;
    RequireOwner;
    topic_assignment := empty_map;
    broker_dns := empty_map;
    
     e = {
        _eventname: "ClearDNSCache"
     };
     event e
    
end